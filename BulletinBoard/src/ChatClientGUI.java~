import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

public class ChatClientGUI extends JFrame {
    private JTextPane chatArea;
    private JTextField messageField;
    private JButton sendButton;
    private JList<String> chatList;
    private DefaultListModel<String> chatListModel;
    private ClientImpl client;
    private String currentChat;
    private StyledDocument chatDocument;
    private Map<String, java.util.List<String>> chatHistories;

    public ChatClientGUI(ClientImpl client) {
        this.client = client;
        this.chatHistories = new HashMap<>();

        // Set up modern look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            UIManager.put("Button.arc", 10);
            UIManager.put("Component.arc", 10);
            UIManager.put("TextComponent.arc", 10);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Configure frame
        setTitle("Chat Application");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLayout(new BorderLayout(10, 10));
        getContentPane().setBackground(new Color(245, 247, 249));

        // Chats sidebar
        chatListModel = new DefaultListModel<>();
        chatList = new JList<>(chatListModel);
        chatList.setBackground(new Color(240, 240, 240));
        chatList.setFont(new Font("Inter", Font.PLAIN, 14));
        chatList.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        chatList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String selectedChat = chatList.getSelectedValue();
                if (selectedChat != null) {
                    switchToChat(selectedChat);
                }
            }
        });

        // Add chat button
        JButton addChatButton = new JButton("+ New Chat");
        addChatButton.setFont(new Font("Inter", Font.BOLD, 14));
        addChatButton.addActionListener(e -> openNewChatDialog());

        JPanel sidebarPanel = new JPanel(new BorderLayout());
        sidebarPanel.add(new JScrollPane(chatList), BorderLayout.CENTER);
        sidebarPanel.add(addChatButton, BorderLayout.SOUTH);
        sidebarPanel.setPreferredSize(new Dimension(200, getHeight()));
        sidebarPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(220, 220, 220)));

        add(sidebarPanel, BorderLayout.WEST);

        // Chat area panel
        JPanel chatPanel = new JPanel(new BorderLayout(10, 10));

        // Chat header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(255, 255, 255));
        headerPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(230, 230, 230)),
                BorderFactory.createEmptyBorder(10, 15, 10, 15)
        ));

        JLabel chatTitle = new JLabel("Select a Chat");
        chatTitle.setFont(new Font("Inter", Font.BOLD, 18));
        chatTitle.setForeground(new Color(50, 50, 70));
        headerPanel.add(chatTitle, BorderLayout.WEST);

        chatPanel.add(headerPanel, BorderLayout.NORTH);

        // Create the chat area with styled document
        chatArea = new JTextPane();
        chatDocument = chatArea.getStyledDocument();
        chatArea.setEditable(false);
        chatArea.setFont(new Font("Inter", Font.PLAIN, 14));
        chatArea.setBackground(Color.WHITE);

        // Create styles for different message types
        Style defaultStyle = chatArea.addStyle("default", null);
        StyleConstants.setFontFamily(defaultStyle, "Inter");
        StyleConstants.setFontSize(defaultStyle, 14);

        Style myMessageStyle = chatArea.addStyle("myMessage", defaultStyle);
        StyleConstants.setForeground(myMessageStyle, new Color(70, 130, 180));

        Style otherMessageStyle = chatArea.addStyle("otherMessage", defaultStyle);
        StyleConstants.setForeground(otherMessageStyle, new Color(80, 80, 80));

        JScrollPane scrollPane = new JScrollPane(chatArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        scrollPane.setBackground(Color.WHITE);
        chatPanel.add(scrollPane, BorderLayout.CENTER);

        // Message input panel
        JPanel messagePanel = new JPanel(new BorderLayout(10, 10));
        messagePanel.setBorder(BorderFactory.createEmptyBorder(0, 15, 15, 15));
        messagePanel.setOpaque(false);

        // Message input field
        messageField = new JTextField();
        messageField.setFont(new Font("Inter", Font.PLAIN, 14));
        messageField.setEnabled(false);
        messageField.putClientProperty("JComponent.roundRect", true);
        messageField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(220, 220, 220), 1),
                BorderFactory.createEmptyBorder(8, 10, 8, 10)
        ));

        // Send button with gradient
        sendButton = new JButton("Send") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                g2.setPaint(new GradientPaint(
                        0, 0, new Color(100, 149, 237),
                        0, getHeight(), new Color(70, 130, 180)
                ));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 10, 10);

                g2.dispose();
                super.paintComponent(g);
            }
        };
        sendButton.setFont(new Font("Inter", Font.BOLD, 14));
        sendButton.setForeground(Color.WHITE);
        sendButton.setFocusPainted(false);
        sendButton.setBorderPainted(false);
        sendButton.setContentAreaFilled(false);
        sendButton.setPreferredSize(new Dimension(100, 40));
        sendButton.setEnabled(false);

        // Add components to message panel
        messagePanel.add(messageField, BorderLayout.CENTER);
        messagePanel.add(sendButton, BorderLayout.EAST);

        chatPanel.add(messagePanel, BorderLayout.SOUTH);

        add(chatPanel, BorderLayout.CENTER);

        // Event handlers
        sendButton.addActionListener(this::sendMessage);
        messageField.addActionListener(this::sendMessage);

        // Center the window and make visible
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void openNewChatDialog() {
        String friendName = JOptionPane.showInputDialog(this, "Enter friend's name:", "New Chat", JOptionPane.PLAIN_MESSAGE);
        if (friendName != null && !friendName.trim().isEmpty()) {
            // Check if chat already exists
            if (!chatListModel.contains(friendName)) {
                chatListModel.addElement(friendName);
                chatHistories.put(friendName, new java.util.ArrayList<>());
            }
            chatList.setSelectedValue(friendName, true);
        }
    }

    private void switchToChat(String otherName) {
        currentChat = otherName;

        // Update header
        Container parent = chatArea.getParent().getParent().getParent();
        if (parent instanceof JPanel) {
            JLabel chatTitle = (JLabel) ((JPanel)parent.getComponent(0)).getComponent(0);
            chatTitle.setText("Chat with " + otherName);
        }

        // Clear existing chat area
        chatArea.setText("");

        // Restore chat history if exists
        java.util.List<String> history = chatHistories.get(otherName);
        if (history != null) {
            for (String message : history) {
                try {
                    Style style = message.startsWith("You:") ?
                            chatArea.getStyle("myMessage") :
                            chatArea.getStyle("otherMessage");

                    chatDocument.insertString(
                            chatDocument.getLength(),
                            message + "\n",
                            style
                    );
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        }

        // Enable message input
        messageField.setEnabled(true);
        sendButton.setEnabled(true);
        messageField.requestFocusInWindow();
    }

    private void sendMessage(ActionEvent e) {
        String message = messageField.getText().trim();
        if (!message.isEmpty() && currentChat != null) {
            try {
                client.sendMessage(currentChat, message);
                String formattedMessage = "You: " + message;
                appendToChat(formattedMessage, "myMessage");
                messageField.setText("");
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(
                        this,
                        "Error sending message. Please try again.",
                        "Connection Error",
                        JOptionPane.ERROR_MESSAGE
                );
                ex.printStackTrace();
            }
        }
    }

    public void displayReceivedMessage(String sender, String message) {
        if (currentChat == null || !currentChat.equals(sender)) {
            // If not in current chat, add to chat list if not already there
            if (!chatListModel.contains(sender)) {
                chatListModel.addElement(sender);
            }
        }

        String formattedMessage = sender + ": " + message;
        appendToChat(formattedMessage, "otherMessage");
    }

    private void appendToChat(String message, String styleKey) {
        try {
            // Store in chat history
            java.util.List<String> history = chatHistories.computeIfAbsent(
                    currentChat, k -> new java.util.ArrayList<>()
            );
            history.add(message);

            // Append to current chat area
            Style style = chatArea.getStyle(styleKey);
            chatDocument.insertString(
                    chatDocument.getLength(),
                    message + "\n",
                    style
            );
            // Auto-scroll to bottom
            chatArea.setCaretPosition(chatDocument.getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }
}